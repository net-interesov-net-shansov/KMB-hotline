import asyncio
import logging
import smtplib
import os
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from typing import Dict, List, Optional
from dataclasses import dataclass
from logging.handlers import RotatingFileHandler
import textwrap

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.media_group import MediaGroupBuilder
from dotenv_vault import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("~/KMB-hotline/.env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –†–æ—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
file_handler = RotatingFileHandler(
    'bot.log', maxBytes=10*1024*1024, backupCount=5, encoding='utf-8'
)
file_handler.setFormatter(logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
))
logger.addHandler(file_handler)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPERATOR_ID = int(os.getenv("OPERATOR_ID"))
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = int(os.getenv("SMTP_PORT"))
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
CORPORATE_EMAIL = os.getenv("CORPORATE_EMAIL")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AppealStates(StatesGroup):
    waiting_for_agreement = State()
    selecting_instance = State()
    entering_topic = State()
    entering_text = State()
    uploading_media = State()
    entering_personal_data = State()
    entering_contact_method = State()
    confirming_appeal = State()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
@dataclass
class Appeal:
    instance: str
    topic: str
    text: str
    full_name: str
    contact_method: str
    media_files: List[Dict] = None
    doc_files: List[Dict] = None
    created_at: datetime = None
    
    def __post_init__(self):
        if self.media_files is None:
            self.media_files = []
        if self.doc_files is None:
            self.doc_files = []
        if self.created_at is None:
            self.created_at = datetime.now()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
"""
def escape_markdown(text: str) -> str:
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    escape_chars = ['\\', '_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    text = text.replace('\\', '\\\\')
    
    # –ó–∞—Ç–µ–º —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    for char in escape_chars[1:]:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à)
        text = text.replace(char, f'\\{char}')
    
    return text
"""


# –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç–∞–Ω—Ü–∏–π
INSTANCES = [
    "–°–∞–Ω–∏—Ç–∞—Ä–Ω–æ-–±—ã—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏–π",
    "–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ—Å–Ω–∞—â–µ–Ω–∏–µ",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞",
    "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–µ–¥–∞–≥–æ–≥–∞–º–∏",
    "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤ –æ–±—É—á–∞—é—â–∏—Ö—Å—è",
    "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –æ–±—É—á–∞—é—â–∏–º–∏—Å—è",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è",
    "–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ —Ñ–∞–∫—Ç–∞–º –∫–æ—Ä—Ä—É–ø—Ü–∏–∏"
]

# –¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
AGREEMENT_TEXT = """
üéì <b>–£–≤–∞–∂–∞–µ–º—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã!</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–º–µ—â–µ–Ω–∏–π, —Ä–∞–±–æ—Ç—ã –ø–µ–¥–∞–≥–æ–≥–æ–≤ –∏ –∏–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–º –≤ —Ö–æ–¥–µ –æ–±—É—á–µ–Ω–∏—è.

‚öñÔ∏è <b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</b>
<u>–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞, –≤—ã –¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª –æ—Ç 27.07.2006 –≥. ‚Ññ 152-–§–ó.</u>

–ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–Ω—è—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.
"""

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_agreement_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_agreement")]
    ])
    return keyboard

def get_main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="new_appeal")]
    ])
    return keyboard

def get_instances_keyboard():
    keyboard = []
    for i, instance in enumerate(INSTANCES):
        keyboard.append([InlineKeyboardButton(text=f"{i+1}. {textwrap.fill(instance)}", callback_data=f"instance_{i}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_next_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_step")]
    ])
    return keyboard

def get_skip_media_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_media")]
    ])
    return keyboard

def get_confirm_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="send_appeal")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_appeal")]
    ])
    return keyboard

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞
def is_valid_media_format(file_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞"""
    allowed_extensions = ['.jpg', '.jpeg', '.png', '.pdf']
    return any(file_name.lower().endswith(ext) for ext in allowed_extensions)

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024**2:
        return f"{size_bytes/1024:.1f} KB"
    else:
        return f"{size_bytes/(1024**2):.1f} MB"

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
async def send_email(appeal: Appeal) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É"""
    try:
        msg = MIMEMultipart()
        msg['From'] = SMTP_USER
        msg['To'] = CORPORATE_EMAIL
        msg['Subject'] = f"[{appeal.instance}] {appeal.topic}"
        
        # –¢–µ–ª–æ –ø–∏—Å—å–º–∞
        body = f"""
–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞

–ò–Ω—Å—Ç–∞–Ω—Ü–∏—è: {appeal.instance}
–¢–µ–º–∞: {appeal.topic}
–î–∞—Ç–∞: {appeal.created_at.strftime('%d.%m.%Y %H:%M')}

–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞: {appeal.full_name}
–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {appeal.contact_method}

–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:
{appeal.text}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç "–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
        """
        
        msg.attach(MIMEText(body, 'plain', 'utf-8'))
        
        # –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤
        for media_file in appeal.media_files:
            for doc_file in appeal.doc_files:
                try:
                    file_info = await bot.get_file(doc_file['file_id'])
                    file_data = await bot.download_file(file_info.file_path)
                    
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(file_data.read())
                    encoders.encode_base64(part)
                    part.add_header(
                        'Content-Disposition',
                        f'attachment; filename= {doc_file["file_name"]}'
                    )
                    msg.attach(part)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {doc_file['file_name']}: {e}")
            try:
                file_info = await bot.get_file(media_file['file_id'])
                file_data = await bot.download_file(file_info.file_path)
                
                part = MIMEBase('application', 'octet-stream')
                part.set_payload(file_data.read())
                encoders.encode_base64(part)
                part.add_header(
                    'Content-Disposition',
                    f'attachment; filename= {media_file["file_name"]}'
                )
                msg.attach(part)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {media_file['file_name']}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SMTP_USER, SMTP_PASSWORD)
        text = msg.as_string()
        server.sendmail(SMTP_USER, CORPORATE_EMAIL, text)
        server.quit()
        
        logger.info(f"Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {appeal.topic}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
async def send_to_operator(appeal: Appeal) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤ Telegram"""
    try:
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_message = f"""
üîî <b>–ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï</b>

üìã <b>–ò–Ω—Å—Ç–∞–Ω—Ü–∏—è:</b> {appeal.instance}
üìù <b>–¢–µ–º–∞:</b> {appeal.topic}
üìÖ <b>–î–∞—Ç–∞:</b> {appeal.created_at.strftime('%d.%m.%Y %H:%M')}

üë§ <b>–§–ò–û:</b> {appeal.full_name}
üìû <b>–°–≤—è–∑—å:</b> {appeal.contact_method}

üí¨ <b>–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>
    {appeal.text}
        """
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_message = await bot.send_message(
            chat_id=OPERATOR_ID,
            text=operator_message,
            parse_mode='HTML'
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
        if appeal.media_files:
            if len(appeal.media_files) == 1:
                # –û–¥–∏–Ω —Ñ–∞–π–ª
                media_file = appeal.media_files[0]
                if media_file['type'] == 'photo':
                    await bot.send_photo(
                        chat_id=OPERATOR_ID,
                        photo=media_file['file_id'],
                        caption=f"üìé –í–ª–æ–∂–µ–Ω–∏–µ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é: {appeal.topic}"
                    )
                elif media_file['type'] == 'document':
                    await bot.send_document(
                        chat_id=OPERATOR_ID,
                        document=media_file['file_id'],
                        caption=f"üìé –í–ª–æ–∂–µ–Ω–∏–µ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é: {appeal.topic}"
                    )
            else:
                # –ì—Ä—É–ø–ø–∞ —Ñ–∞–π–ª–æ–≤
                media_group = MediaGroupBuilder(caption=f"üìé –í–ª–æ–∂–µ–Ω–∏—è –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é: {appeal.topic}")
                
                for media_file in appeal.media_files:
                    if media_file['type'] == 'photo':
                        media_group.add_photo(media=media_file['file_id'])
                    elif media_file['type'] == 'document':
                        media_group.add_document(media=media_file['file_id'])
                
                await bot.send_media_group(
                    chat_id=OPERATOR_ID,
                    media=media_group.build()
                )

        if appeal.doc_files:
            if len(appeal.doc_files) == 1:
                # –û–¥–∏–Ω —Ñ–∞–π–ª
                doc_file = appeal.doc_files[0]
                if doc_file['type'] == 'photo':
                    await bot.send_photo(
                        chat_id=OPERATOR_ID,
                        photo=doc_file['file_id'],
                        caption=f"üìé –í–ª–æ–∂–µ–Ω–∏–µ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é: {appeal.topic}"
                    )
                elif doc_file['type'] == 'document':
                    await bot.send_document(
                        chat_id=OPERATOR_ID,
                        document=doc_file['file_id'],
                        caption=f"üìé –í–ª–æ–∂–µ–Ω–∏–µ –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é: {appeal.topic}"
                    )
            else:
                # –ì—Ä—É–ø–ø–∞ —Ñ–∞–π–ª–æ–≤
                media_group = MediaGroupBuilder(caption=f"üìé –í–ª–æ–∂–µ–Ω–∏—è –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é: {appeal.topic}")
                
                for doc_file in appeal.doc_files:
                    if doc_file['type'] == 'photo':
                        media_group.add_photo(media=doc_file['file_id'])
                    elif doc_file['type'] == 'document':
                        media_group.add_document(media=doc_file['file_id'])
                
                await bot.send_media_group(
                    chat_id=OPERATOR_ID,
                    media=media_group.build()
                )
        
        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {appeal.topic}")
        return sent_message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    await state.clear()
    await message.answer(
        text=AGREEMENT_TEXT,
        reply_markup=get_agreement_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(AppealStates.waiting_for_agreement)

@dp.callback_query(F.data == "accept_agreement")
async def accept_agreement(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è"""
    await callback.message.edit_text(
        text="‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "new_appeal")
async def start_new_appeal(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
    
    await callback.message.edit_text(
        text="üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:</b>",
        reply_markup=get_instances_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(AppealStates.selecting_instance)
    await callback.answer()

@dp.callback_query(F.data.startswith("instance_"))
async def select_instance(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏"""
    instance_index = int(callback.data.split("_")[1])
    selected_instance = INSTANCES[instance_index]
    
    await state.update_data(instance=selected_instance)
    
    await callback.message.edit_text(
        text=f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è: <b>{selected_instance}</b>",
        reply_markup=get_next_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(AppealStates.entering_topic)
    await callback.answer()

@dp.callback_query(F.data == "next_step", StateFilter(AppealStates.entering_topic))
async def ask_for_topic(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    await callback.message.edit_text(
        text="üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è</b> (–∫—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫):",
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message(StateFilter(AppealStates.entering_topic))
async def receive_topic(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    if len(message.text) < 5:
        await message.answer("‚ùå –¢–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    if len(message.text) > 100:
        await message.answer("‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    
    await state.update_data(topic=message.text)
    
    await message.answer(
        text=f"‚úÖ –¢–µ–º–∞: <b>{message.text}</b>",
        reply_markup=get_next_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(AppealStates.entering_text)

@dp.callback_query(F.data == "next_step", StateFilter(AppealStates.entering_text))
async def ask_for_text(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    await callback.message.edit_text(
        text="üìÑ <b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>",
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message(StateFilter(AppealStates.entering_text))
async def receive_text(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""

    if len(message.text) < 20:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    if len(message.text) > 4000:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    
    await state.update_data(text=message.text)
    await state.update_data(media_files=[])         # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ç–æ
    await state.update_data(doc_files=[])      # –¢–∞–∫–æ–π –∂–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    
    await message.answer(
        text="üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã</b> (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)\n\n"
             "‚Ä¢ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, PDF\n"
             "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë\n"
             "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤\n\n"
             "–ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω—É–∂–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª",        
        reply_markup=get_skip_media_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(AppealStates.uploading_media)

@dp.message(StateFilter(AppealStates.uploading_media), F.content_type.in_({'photo', 'document'}))
async def receive_media(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤"""
    data = await state.get_data()
    media_files = data.get('media_files', [])
    doc_files = data.get('doc_files', [])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤
    if len(media_files) > 10:
        return  # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã
    
    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        file_info = await bot.get_file(file_id)
        file_name = f"photo_{len(media_files)+1}.jpg"
        file_size = file_info.file_size
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if file_size > 10 * 1024 * 1024:  # 10 –ú–ë
            return  # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
        
        media_files.append({
            'type': 'photo',
            'file_id': file_id,
            'file_name': file_name,
            'file_size': file_size
        })
        
    elif message.content_type == 'document':
        document = message.document
        file_id = document.file_id
        file_name = document.file_name
        file_size = document.file_size
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if file_size > 10 * 1024 * 1024:  # 10 –ú–ë
            return  # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
        if not is_valid_media_format(file_name):
            return  # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        
        doc_files.append({
            'type': 'document',
            'file_id': file_id,
            'file_name': file_name,
            'file_size': file_size
        })
    
    await state.update_data(media_files=media_files, doc_files=doc_files)

# @dp.message(StateFilter(AppealStates.uploading_media))
# async def handle_wrong_media_format(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞"""
#     await message.answer(
#         "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
#         reply_markup=get_skip_media_keyboard()
#     )

@dp.callback_query(F.data == "skip_media", StateFilter(AppealStates.uploading_media))
async def skip_media_upload(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞"""
    await callback.message.edit_text(
        text="‚è≠Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞.",
        reply_markup=get_next_keyboard()
    )
    await state.set_state(AppealStates.entering_personal_data)
    await callback.answer()

@dp.callback_query(F.data == "finish_media", StateFilter(AppealStates.uploading_media))
async def finish_media_upload(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞"""
    data = await state.get_data()
    media_files = data.get('media_files', [])
    doc_files = data.get('doc_files', [])
    
    if len(media_files) == 0 and len(doc_files) == 0:
        report_text = "üìé –§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
    else:
        report_text = f"üìé <b>–û—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:</b>\n\n"
        report_text += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(media_files)} —Ñ–æ—Ç–æ –∏ {len(doc_files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n"
        
        for i, file in enumerate(media_files, 1):
            report_text += f"{i}. {file['file_name']} ({format_file_size(file['file_size'])})\n"
        for i, file in enumerate(doc_files, 1):
            report_text += f"{i}. {file['file_name']} ({format_file_size(file['file_size'])})\n"


    
    await callback.message.edit_text(
        text=report_text,
        reply_markup=get_next_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(AppealStates.entering_personal_data)
    await callback.answer()

@dp.callback_query(F.data == "next_step", StateFilter(AppealStates.entering_personal_data))
async def ask_for_personal_data(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await callback.message.answer(
        text="üë§ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:</b>",
        parse_mode='HTML'
    )
    await callback.answer()


@dp.message(StateFilter(AppealStates.entering_personal_data))
async def receive_personal_data(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û"""
    full_name = message.text.strip()
    space = " "

    if space not in full_name:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ò–º—è, –§–∞–º–∏–ª–∏—é –∏ –û—Ç—á–µ—Å—Ç–≤–æ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏):")
        return
    
    await state.update_data(full_name=full_name)
    
    await message.answer(
        text=f"‚úÖ –§–ò–û: <b>{full_name}</b>",
        reply_markup=get_next_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(AppealStates.entering_contact_method)

@dp.callback_query(F.data == "next_step", StateFilter(AppealStates.entering_contact_method))
async def ask_for_contact_method(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏"""
    await callback.message.edit_text(
        text="üìû <b>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:</b>\n\n"
             "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
             "‚Ä¢ Username Telegram (–¥–ª—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞)\n"
             "‚Ä¢ Email: example@mail.com\n"
             "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (xxx) xxx-xx-xx\n"
             "‚Ä¢ –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±",
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message(StateFilter(AppealStates.entering_contact_method))
async def receive_contact_method(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏"""
    contact_method = message.text.strip()
    
    if len(contact_method) < 3:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):")
        return
    
    await state.update_data(contact_method=contact_method)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    
    summary = f"""
üìã <b>–ü–†–û–í–ï–†–¨–¢–ï –û–ë–†–ê–©–ï–ù–ò–ï –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô</b>

üè¢ <b>–ò–Ω—Å—Ç–∞–Ω—Ü–∏—è:</b> {data['instance']}
üìù <b>–¢–µ–º–∞:</b> {data['topic']}
üë§ <b>–§–ò–û:</b> {data['full_name']}
üìû <b>–°–≤—è–∑—å:</b> {data['contact_method']}
üìé <b>–§–∞–π–ª–æ–≤:</b> {len(data.get('media_files', []))}

üí¨ <b>–¢–µ–∫—Å—Ç:</b>
{data['text']}
    """
    
    await message.answer(
        text=summary,
        reply_markup=get_confirm_keyboard(),
        parse_mode='HTML'
    )
    await state.set_state(AppealStates.confirming_appeal)

@dp.callback_query(F.data == "send_appeal", StateFilter(AppealStates.confirming_appeal))
async def send_appeal(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
    appeal = Appeal(
        instance=data['instance'],
        topic=data['topic'],
        text=data['text'],
        full_name=data['full_name'],
        contact_method=data['contact_method'],
        media_files=data.get('media_files', []),
        doc_files=data.get('doc_files', [])
    )
    
    await callback.message.edit_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ...")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    operator_success = await send_to_operator(appeal)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
    email_success = await send_email(appeal)
    
    if operator_success and email_success:
        success_message = """
‚úÖ <b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ö–æ–ª–ª–µ–¥–∂–∞!</b>

‚è∞ <b>–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–¥–∞—á–∏ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.
        """
        
        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {appeal.topic} –æ—Ç {appeal.full_name}")
        
    else:
        success_message = """
‚úÖ <b>–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ö–æ–ª–ª–µ–¥–∂–∞!</b>

‚è∞ <b>–í –±–ª–∏–∂–∞–π—à–∏–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–¥–∞—á–∏ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.
        """
        
        logger.warning(f"–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {appeal.topic}")
    
    await callback.message.edit_text(
        text=success_message,
        reply_markup=get_main_menu_keyboard(),
        parse_mode='HTML'
    )
    
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "cancel_appeal")
async def cancel_appeal(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    await callback.message.edit_text(
        text="‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.",
        reply_markup=get_main_menu_keyboard()
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ '–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not all([BOT_TOKEN, OPERATOR_ID, SMTP_USER, SMTP_PASSWORD, CORPORATE_EMAIL]):
        logger.error("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return
    
    logger.info(f"–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ID: {OPERATOR_ID}")
    logger.info(f"–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞: {CORPORATE_EMAIL}")
    
    try:
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())